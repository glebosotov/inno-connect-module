// Autogenerated from Pigeon (v9.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return (value as Any) as! T?
}

enum QuestionType: Int {
  case singleChoice = 0
  case singleChoiceOpen = 1
  case open = 2
}

/// Generated class from Pigeon that represents data sent in messages.
struct QuizConfiguration {
  var startImageUrl: String? = nil
  var endImageUrl: String? = nil
  var startTitle: String? = nil
  var startDescription: String? = nil
  var endTitle: String? = nil
  var endDescription: String? = nil
  var nextButtonTitle: String
  var seedColor: String? = nil
  var skipButtonTitle: String? = nil
  var disableSkipButton: Bool? = nil

  static func fromList(_ list: [Any]) -> QuizConfiguration? {
    let startImageUrl: String? = nilOrValue(list[0])
    let endImageUrl: String? = nilOrValue(list[1])
    let startTitle: String? = nilOrValue(list[2])
    let startDescription: String? = nilOrValue(list[3])
    let endTitle: String? = nilOrValue(list[4])
    let endDescription: String? = nilOrValue(list[5])
    let nextButtonTitle = list[6] as! String
    let seedColor: String? = nilOrValue(list[7])
    let skipButtonTitle: String? = nilOrValue(list[8])
    let disableSkipButton: Bool? = nilOrValue(list[9])

    return QuizConfiguration(
      startImageUrl: startImageUrl,
      endImageUrl: endImageUrl,
      startTitle: startTitle,
      startDescription: startDescription,
      endTitle: endTitle,
      endDescription: endDescription,
      nextButtonTitle: nextButtonTitle,
      seedColor: seedColor,
      skipButtonTitle: skipButtonTitle,
      disableSkipButton: disableSkipButton
    )
  }
  func toList() -> [Any?] {
    return [
      startImageUrl,
      endImageUrl,
      startTitle,
      startDescription,
      endTitle,
      endDescription,
      nextButtonTitle,
      seedColor,
      skipButtonTitle,
      disableSkipButton,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct HubScreenConfiguration {
  var news: [NewsItem?]
  var buttons: [HubButton?]
  var deleteButtonConfig: DeleteDataConfiguration? = nil
  var disableHub: Bool

  static func fromList(_ list: [Any]) -> HubScreenConfiguration? {
    let news = list[0] as! [NewsItem?]
    let buttons = list[1] as! [HubButton?]
    var deleteButtonConfig: DeleteDataConfiguration? = nil
    if let deleteButtonConfigList = list[2] as! [Any]? {
      deleteButtonConfig = DeleteDataConfiguration.fromList(deleteButtonConfigList)
    }
    let disableHub = list[3] as! Bool

    return HubScreenConfiguration(
      news: news,
      buttons: buttons,
      deleteButtonConfig: deleteButtonConfig,
      disableHub: disableHub
    )
  }
  func toList() -> [Any?] {
    return [
      news,
      buttons,
      deleteButtonConfig?.toList(),
      disableHub,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DeleteDataConfiguration {
  var title: String
  var confirmationTitle: String
  var confirmationMessage: String
  var confirmationButtonTitle: String
  var cancelButtonTitle: String

  static func fromList(_ list: [Any]) -> DeleteDataConfiguration? {
    let title = list[0] as! String
    let confirmationTitle = list[1] as! String
    let confirmationMessage = list[2] as! String
    let confirmationButtonTitle = list[3] as! String
    let cancelButtonTitle = list[4] as! String

    return DeleteDataConfiguration(
      title: title,
      confirmationTitle: confirmationTitle,
      confirmationMessage: confirmationMessage,
      confirmationButtonTitle: confirmationButtonTitle,
      cancelButtonTitle: cancelButtonTitle
    )
  }
  func toList() -> [Any?] {
    return [
      title,
      confirmationTitle,
      confirmationMessage,
      confirmationButtonTitle,
      cancelButtonTitle,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct HubButton {
  var title: String
  var id: String
  var startsQuiz: Bool

  static func fromList(_ list: [Any]) -> HubButton? {
    let title = list[0] as! String
    let id = list[1] as! String
    let startsQuiz = list[2] as! Bool

    return HubButton(
      title: title,
      id: id,
      startsQuiz: startsQuiz
    )
  }
  func toList() -> [Any?] {
    return [
      title,
      id,
      startsQuiz,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NewsItem {
  var id: String
  var title: String
  var description: String? = nil
  var imageUrl: String? = nil
  var dateSecondsFromEpoch: Int64? = nil

  static func fromList(_ list: [Any]) -> NewsItem? {
    let id = list[0] as! String
    let title = list[1] as! String
    let description: String? = nilOrValue(list[2])
    let imageUrl: String? = nilOrValue(list[3])
    let dateSecondsFromEpoch: Int64? = list[4] is NSNull ? nil : (list[4] is Int64? ? list[4] as! Int64? : Int64(list[4] as! Int32))

    return NewsItem(
      id: id,
      title: title,
      description: description,
      imageUrl: imageUrl,
      dateSecondsFromEpoch: dateSecondsFromEpoch
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      title,
      description,
      imageUrl,
      dateSecondsFromEpoch,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct QuestionModel {
  var id: String
  var type: QuestionType
  var image: String? = nil
  var title: String
  var description: String? = nil
  var options: [Option?]

  static func fromList(_ list: [Any]) -> QuestionModel? {
    let id = list[0] as! String
    let type = QuestionType(rawValue: list[1] as! Int)!
    let image: String? = nilOrValue(list[2])
    let title = list[3] as! String
    let description: String? = nilOrValue(list[4])
    let options = list[5] as! [Option?]

    return QuestionModel(
      id: id,
      type: type,
      image: image,
      title: title,
      description: description,
      options: options
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      type.rawValue,
      image,
      title,
      description,
      options,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Option {
  var isOpen: Bool
  var id: String
  var text: String

  static func fromList(_ list: [Any]) -> Option? {
    let isOpen = list[0] as! Bool
    let id = list[1] as! String
    let text = list[2] as! String

    return Option(
      isOpen: isOpen,
      id: id,
      text: text
    )
  }
  func toList() -> [Any?] {
    return [
      isOpen,
      id,
      text,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct AnswerModel {
  var questionId: String
  var optionId: String? = nil
  var text: String? = nil

  static func fromList(_ list: [Any]) -> AnswerModel? {
    let questionId = list[0] as! String
    let optionId: String? = nilOrValue(list[1])
    let text: String? = nilOrValue(list[2])

    return AnswerModel(
      questionId: questionId,
      optionId: optionId,
      text: text
    )
  }
  func toList() -> [Any?] {
    return [
      questionId,
      optionId,
      text,
    ]
  }
}
private class QuizApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return AnswerModel.fromList(self.readValue() as! [Any])
      case 129:
        return DeleteDataConfiguration.fromList(self.readValue() as! [Any])
      case 130:
        return HubButton.fromList(self.readValue() as! [Any])
      case 131:
        return HubScreenConfiguration.fromList(self.readValue() as! [Any])
      case 132:
        return NewsItem.fromList(self.readValue() as! [Any])
      case 133:
        return Option.fromList(self.readValue() as! [Any])
      case 134:
        return QuestionModel.fromList(self.readValue() as! [Any])
      case 135:
        return QuizConfiguration.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class QuizApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? AnswerModel {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? DeleteDataConfiguration {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? HubButton {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? HubScreenConfiguration {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? NewsItem {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? Option {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? QuestionModel {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? QuizConfiguration {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class QuizApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return QuizApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return QuizApiCodecWriter(data: data)
  }
}

class QuizApiCodec: FlutterStandardMessageCodec {
  static let shared = QuizApiCodec(readerWriter: QuizApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol QuizApi {
  func getQuizConfig() throws -> QuizConfiguration
  func getQuestions() throws -> [QuestionModel]
  func getHubScreenConfig() throws -> HubScreenConfiguration
  func sendAnswers(answers: [AnswerModel]) throws
  func quizStarted() throws
  func hubButtonPressed(id: String) throws
  func newsItemPressed(id: String) throws
  func deleteDataPressed() throws
  func skipQuiz() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class QuizApiSetup {
  /// The codec used by QuizApi.
  static var codec: FlutterStandardMessageCodec { QuizApiCodec.shared }
  /// Sets up an instance of `QuizApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: QuizApi?) {
    let getQuizConfigChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.QuizApi.getQuizConfig", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getQuizConfigChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getQuizConfig()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getQuizConfigChannel.setMessageHandler(nil)
    }
    let getQuestionsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.QuizApi.getQuestions", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getQuestionsChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getQuestions()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getQuestionsChannel.setMessageHandler(nil)
    }
    let getHubScreenConfigChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.QuizApi.getHubScreenConfig", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getHubScreenConfigChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getHubScreenConfig()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getHubScreenConfigChannel.setMessageHandler(nil)
    }
    let sendAnswersChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.QuizApi.sendAnswers", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendAnswersChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let answersArg = args[0] as! [AnswerModel]
        do {
          try api.sendAnswers(answers: answersArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      sendAnswersChannel.setMessageHandler(nil)
    }
    let quizStartedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.QuizApi.quizStarted", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      quizStartedChannel.setMessageHandler { _, reply in
        do {
          try api.quizStarted()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      quizStartedChannel.setMessageHandler(nil)
    }
    let hubButtonPressedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.QuizApi.hubButtonPressed", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      hubButtonPressedChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let idArg = args[0] as! String
        do {
          try api.hubButtonPressed(id: idArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      hubButtonPressedChannel.setMessageHandler(nil)
    }
    let newsItemPressedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.QuizApi.newsItemPressed", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      newsItemPressedChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let idArg = args[0] as! String
        do {
          try api.newsItemPressed(id: idArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      newsItemPressedChannel.setMessageHandler(nil)
    }
    let deleteDataPressedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.QuizApi.deleteDataPressed", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deleteDataPressedChannel.setMessageHandler { _, reply in
        do {
          try api.deleteDataPressed()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      deleteDataPressedChannel.setMessageHandler(nil)
    }
    let skipQuizChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.QuizApi.skipQuiz", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      skipQuizChannel.setMessageHandler { _, reply in
        do {
          try api.skipQuiz()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      skipQuizChannel.setMessageHandler(nil)
    }
  }
}
