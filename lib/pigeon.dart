// Autogenerated from Pigeon (v9.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum QuestionType {
  singleChoice,
  singleChoiceOpen,
  open,
}

class QuizConfiguration {
  QuizConfiguration({
    this.startImageUrl,
    this.endImageUrl,
    this.startTitle,
    this.startDescription,
    this.endTitle,
    this.endDescription,
    required this.nextButtonTitle,
    this.seedColor,
    this.skipButtonTitle,
    this.disableSkipButton,
  });

  String? startImageUrl;

  String? endImageUrl;

  String? startTitle;

  String? startDescription;

  String? endTitle;

  String? endDescription;

  String nextButtonTitle;

  String? seedColor;

  String? skipButtonTitle;

  bool? disableSkipButton;

  Object encode() {
    return <Object?>[
      startImageUrl,
      endImageUrl,
      startTitle,
      startDescription,
      endTitle,
      endDescription,
      nextButtonTitle,
      seedColor,
      skipButtonTitle,
      disableSkipButton,
    ];
  }

  static QuizConfiguration decode(Object result) {
    result as List<Object?>;
    return QuizConfiguration(
      startImageUrl: result[0] as String?,
      endImageUrl: result[1] as String?,
      startTitle: result[2] as String?,
      startDescription: result[3] as String?,
      endTitle: result[4] as String?,
      endDescription: result[5] as String?,
      nextButtonTitle: result[6]! as String,
      seedColor: result[7] as String?,
      skipButtonTitle: result[8] as String?,
      disableSkipButton: result[9] as bool?,
    );
  }
}

class HubScreenConfiguration {
  HubScreenConfiguration({
    required this.news,
    required this.buttons,
    this.deleteButtonConfig,
    required this.disableHub,
  });

  List<NewsItem?> news;

  List<HubButton?> buttons;

  DeleteDataConfiguration? deleteButtonConfig;

  bool disableHub;

  Object encode() {
    return <Object?>[
      news,
      buttons,
      deleteButtonConfig?.encode(),
      disableHub,
    ];
  }

  static HubScreenConfiguration decode(Object result) {
    result as List<Object?>;
    return HubScreenConfiguration(
      news: (result[0] as List<Object?>?)!.cast<NewsItem?>(),
      buttons: (result[1] as List<Object?>?)!.cast<HubButton?>(),
      deleteButtonConfig: result[2] != null
          ? DeleteDataConfiguration.decode(result[2]! as List<Object?>)
          : null,
      disableHub: result[3]! as bool,
    );
  }
}

class DeleteDataConfiguration {
  DeleteDataConfiguration({
    required this.title,
    required this.confirmationTitle,
    required this.confirmationMessage,
    required this.confirmationButtonTitle,
    required this.cancelButtonTitle,
  });

  String title;

  String confirmationTitle;

  String confirmationMessage;

  String confirmationButtonTitle;

  String cancelButtonTitle;

  Object encode() {
    return <Object?>[
      title,
      confirmationTitle,
      confirmationMessage,
      confirmationButtonTitle,
      cancelButtonTitle,
    ];
  }

  static DeleteDataConfiguration decode(Object result) {
    result as List<Object?>;
    return DeleteDataConfiguration(
      title: result[0]! as String,
      confirmationTitle: result[1]! as String,
      confirmationMessage: result[2]! as String,
      confirmationButtonTitle: result[3]! as String,
      cancelButtonTitle: result[4]! as String,
    );
  }
}

class HubButton {
  HubButton({
    required this.title,
    required this.id,
    required this.startsQuiz,
  });

  String title;

  String id;

  bool startsQuiz;

  Object encode() {
    return <Object?>[
      title,
      id,
      startsQuiz,
    ];
  }

  static HubButton decode(Object result) {
    result as List<Object?>;
    return HubButton(
      title: result[0]! as String,
      id: result[1]! as String,
      startsQuiz: result[2]! as bool,
    );
  }
}

class NewsItem {
  NewsItem({
    required this.id,
    required this.title,
    this.description,
    this.imageUrl,
    this.dateSecondsFromEpoch,
  });

  String id;

  String title;

  String? description;

  String? imageUrl;

  int? dateSecondsFromEpoch;

  Object encode() {
    return <Object?>[
      id,
      title,
      description,
      imageUrl,
      dateSecondsFromEpoch,
    ];
  }

  static NewsItem decode(Object result) {
    result as List<Object?>;
    return NewsItem(
      id: result[0]! as String,
      title: result[1]! as String,
      description: result[2] as String?,
      imageUrl: result[3] as String?,
      dateSecondsFromEpoch: result[4] as int?,
    );
  }
}

class QuestionModel {
  QuestionModel({
    required this.id,
    required this.type,
    this.image,
    required this.title,
    this.description,
    required this.options,
  });

  String id;

  QuestionType type;

  String? image;

  String title;

  String? description;

  List<Option?> options;

  Object encode() {
    return <Object?>[
      id,
      type.index,
      image,
      title,
      description,
      options,
    ];
  }

  static QuestionModel decode(Object result) {
    result as List<Object?>;
    return QuestionModel(
      id: result[0]! as String,
      type: QuestionType.values[result[1]! as int],
      image: result[2] as String?,
      title: result[3]! as String,
      description: result[4] as String?,
      options: (result[5] as List<Object?>?)!.cast<Option?>(),
    );
  }
}

class Option {
  Option({
    required this.isOpen,
    required this.id,
    required this.text,
  });

  bool isOpen;

  String id;

  String text;

  Object encode() {
    return <Object?>[
      isOpen,
      id,
      text,
    ];
  }

  static Option decode(Object result) {
    result as List<Object?>;
    return Option(
      isOpen: result[0]! as bool,
      id: result[1]! as String,
      text: result[2]! as String,
    );
  }
}

class AnswerModel {
  AnswerModel({
    required this.questionId,
    this.optionId,
    this.text,
  });

  String questionId;

  String? optionId;

  String? text;

  Object encode() {
    return <Object?>[
      questionId,
      optionId,
      text,
    ];
  }

  static AnswerModel decode(Object result) {
    result as List<Object?>;
    return AnswerModel(
      questionId: result[0]! as String,
      optionId: result[1] as String?,
      text: result[2] as String?,
    );
  }
}

class _QuizApiCodec extends StandardMessageCodec {
  const _QuizApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AnswerModel) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is DeleteDataConfiguration) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is HubButton) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is HubScreenConfiguration) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is NewsItem) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is Option) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is QuestionModel) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is QuizConfiguration) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AnswerModel.decode(readValue(buffer)!);
      case 129: 
        return DeleteDataConfiguration.decode(readValue(buffer)!);
      case 130: 
        return HubButton.decode(readValue(buffer)!);
      case 131: 
        return HubScreenConfiguration.decode(readValue(buffer)!);
      case 132: 
        return NewsItem.decode(readValue(buffer)!);
      case 133: 
        return Option.decode(readValue(buffer)!);
      case 134: 
        return QuestionModel.decode(readValue(buffer)!);
      case 135: 
        return QuizConfiguration.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class QuizApi {
  /// Constructor for [QuizApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  QuizApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _QuizApiCodec();

  Future<QuizConfiguration> getQuizConfig() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.QuizApi.getQuizConfig', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as QuizConfiguration?)!;
    }
  }

  Future<List<QuestionModel?>> getQuestions() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.QuizApi.getQuestions', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<QuestionModel?>();
    }
  }

  Future<HubScreenConfiguration> getHubScreenConfig() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.QuizApi.getHubScreenConfig', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as HubScreenConfiguration?)!;
    }
  }

  Future<void> sendAnswers(List<AnswerModel?> arg_answers) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.QuizApi.sendAnswers', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_answers]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> quizStarted() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.QuizApi.quizStarted', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> hubButtonPressed(String arg_id) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.QuizApi.hubButtonPressed', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> newsItemPressed(String arg_id) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.QuizApi.newsItemPressed', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> deleteDataPressed() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.QuizApi.deleteDataPressed', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> skipQuiz() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.QuizApi.skipQuiz', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}
