// Autogenerated from Pigeon (v9.2.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class QuestionType(val raw: Int) {
  SINGLECHOICE(0),
  SINGLECHOICEOPEN(1),
  OPEN(2);

  companion object {
    fun ofRaw(raw: Int): QuestionType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class QuizConfiguration (
  val startImageUrl: String? = null,
  val endImageUrl: String? = null,
  val startTitle: String? = null,
  val startDescription: String? = null,
  val endTitle: String? = null,
  val endDescription: String? = null,
  val nextButtonTitle: String,
  val seedColor: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): QuizConfiguration {
      val startImageUrl = list[0] as String?
      val endImageUrl = list[1] as String?
      val startTitle = list[2] as String?
      val startDescription = list[3] as String?
      val endTitle = list[4] as String?
      val endDescription = list[5] as String?
      val nextButtonTitle = list[6] as String
      val seedColor = list[7] as String?
      return QuizConfiguration(startImageUrl, endImageUrl, startTitle, startDescription, endTitle, endDescription, nextButtonTitle, seedColor)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      startImageUrl,
      endImageUrl,
      startTitle,
      startDescription,
      endTitle,
      endDescription,
      nextButtonTitle,
      seedColor,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class HubScreenConfiguration (
  val news: List<NewsItem?>,
  val buttons: List<HubButton?>,
  val deleteButtonConfig: DeleteDataConfiguration? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): HubScreenConfiguration {
      val news = list[0] as List<NewsItem?>
      val buttons = list[1] as List<HubButton?>
      val deleteButtonConfig: DeleteDataConfiguration? = (list[2] as List<Any?>?)?.let {
        DeleteDataConfiguration.fromList(it)
      }
      return HubScreenConfiguration(news, buttons, deleteButtonConfig)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      news,
      buttons,
      deleteButtonConfig?.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class DeleteDataConfiguration (
  val title: String,
  val confirmationTitle: String,
  val confirmationMessage: String,
  val confirmationButtonTitle: String,
  val cancelButtonTitle: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): DeleteDataConfiguration {
      val title = list[0] as String
      val confirmationTitle = list[1] as String
      val confirmationMessage = list[2] as String
      val confirmationButtonTitle = list[3] as String
      val cancelButtonTitle = list[4] as String
      return DeleteDataConfiguration(title, confirmationTitle, confirmationMessage, confirmationButtonTitle, cancelButtonTitle)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      title,
      confirmationTitle,
      confirmationMessage,
      confirmationButtonTitle,
      cancelButtonTitle,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class HubButton (
  val title: String,
  val id: String,
  val startsQuiz: Boolean

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): HubButton {
      val title = list[0] as String
      val id = list[1] as String
      val startsQuiz = list[2] as Boolean
      return HubButton(title, id, startsQuiz)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      title,
      id,
      startsQuiz,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NewsItem (
  val id: String,
  val title: String,
  val description: String? = null,
  val imageUrl: String? = null,
  val dateSecondsFromEpoch: Long? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NewsItem {
      val id = list[0] as String
      val title = list[1] as String
      val description = list[2] as String?
      val imageUrl = list[3] as String?
      val dateSecondsFromEpoch = list[4].let { if (it is Int) it.toLong() else it as Long? }
      return NewsItem(id, title, description, imageUrl, dateSecondsFromEpoch)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      title,
      description,
      imageUrl,
      dateSecondsFromEpoch,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class QuestionModel (
  val id: String,
  val type: QuestionType,
  val image: String? = null,
  val title: String,
  val description: String? = null,
  val options: List<Option?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): QuestionModel {
      val id = list[0] as String
      val type = QuestionType.ofRaw(list[1] as Int)!!
      val image = list[2] as String?
      val title = list[3] as String
      val description = list[4] as String?
      val options = list[5] as List<Option?>
      return QuestionModel(id, type, image, title, description, options)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      type.raw,
      image,
      title,
      description,
      options,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Option (
  val isOpen: Boolean,
  val id: String,
  val text: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): Option {
      val isOpen = list[0] as Boolean
      val id = list[1] as String
      val text = list[2] as String
      return Option(isOpen, id, text)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      isOpen,
      id,
      text,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AnswerModel (
  val questionId: String,
  val optionId: String? = null,
  val text: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): AnswerModel {
      val questionId = list[0] as String
      val optionId = list[1] as String?
      val text = list[2] as String?
      return AnswerModel(questionId, optionId, text)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      questionId,
      optionId,
      text,
    )
  }
}
@Suppress("UNCHECKED_CAST")
private object QuizApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AnswerModel.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DeleteDataConfiguration.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          HubButton.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          HubScreenConfiguration.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NewsItem.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Option.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          QuestionModel.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          QuizConfiguration.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is AnswerModel -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is DeleteDataConfiguration -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is HubButton -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is HubScreenConfiguration -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is NewsItem -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is Option -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is QuestionModel -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is QuizConfiguration -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface QuizApi {
  fun getQuizConfig(): QuizConfiguration
  fun getQuestions(): List<QuestionModel>
  fun getHubScreenConfig(): HubScreenConfiguration
  fun sendAnswers(answers: List<AnswerModel>)
  fun quizStarted()
  fun hubButtonPressed(id: String)
  fun newsItemPressed(id: String)
  fun deleteDataPressed()

  companion object {
    /** The codec used by QuizApi. */
    val codec: MessageCodec<Any?> by lazy {
      QuizApiCodec
    }
    /** Sets up an instance of `QuizApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: QuizApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.QuizApi.getQuizConfig", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getQuizConfig())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.QuizApi.getQuestions", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getQuestions())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.QuizApi.getHubScreenConfig", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getHubScreenConfig())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.QuizApi.sendAnswers", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val answersArg = args[0] as List<AnswerModel>
            var wrapped: List<Any?>
            try {
              api.sendAnswers(answersArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.QuizApi.quizStarted", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.quizStarted()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.QuizApi.hubButtonPressed", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            var wrapped: List<Any?>
            try {
              api.hubButtonPressed(idArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.QuizApi.newsItemPressed", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            var wrapped: List<Any?>
            try {
              api.newsItemPressed(idArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.QuizApi.deleteDataPressed", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.deleteDataPressed()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
